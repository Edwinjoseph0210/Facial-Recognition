{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Downloads/Ai_FACE_RECOGNITION-main/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      setIsAuthenticated(true);\n      setUser({\n        username: localStorage.getItem('username')\n      });\n    }\n    setLoading(false);\n  }, []);\n  const login = async credentials => {\n    try {\n      const response = await authAPI.login(credentials);\n      if (response.data.success) {\n        setIsAuthenticated(true);\n        setUser({\n          username: credentials.username\n        });\n        localStorage.setItem('authToken', 'dummy-token'); // In a real app, use actual token\n        localStorage.setItem('username', credentials.username);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          message: response.data.message\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsAuthenticated(false);\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n    }\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","token","localStorage","getItem","username","login","credentials","response","data","success","setItem","message","error","_error$response","_error$response$data","logout","console","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/apple/Downloads/Ai_FACE_RECOGNITION-main/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      setIsAuthenticated(true);\n      setUser({ username: localStorage.getItem('username') });\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      const response = await authAPI.login(credentials);\n      if (response.data.success) {\n        setIsAuthenticated(true);\n        setUser({ username: credentials.username });\n        localStorage.setItem('authToken', 'dummy-token'); // In a real app, use actual token\n        localStorage.setItem('username', credentials.username);\n        return { success: true };\n      } else {\n        return { success: false, message: response.data.message };\n      }\n    } catch (error) {\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Login failed' \n      };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsAuthenticated(false);\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n    }\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
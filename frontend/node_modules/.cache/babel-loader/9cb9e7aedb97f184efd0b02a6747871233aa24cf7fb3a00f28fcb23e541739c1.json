{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Downloads/Facial-Recognition-main 2/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check auth status on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/dashboard', {\n        method: 'GET',\n        credentials: 'include'\n      });\n      if (response.ok || response.redirected) {\n        // Try to get user info from session if available\n        setIsAuthenticated(true);\n      } else {\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      const {\n        email,\n        password\n      } = credentials;\n      const response = await fetch('http://localhost:5001/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          username: email,\n          // Using email as username for this system\n          password: password\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setIsAuthenticated(true);\n        setUser({\n          username: email\n        });\n        return {\n          success: true,\n          user: {\n            username: email\n          }\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message || 'Login failed'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error: Could not connect to server'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const {\n        email,\n        password,\n        confirm_password\n      } = userData;\n\n      // Validate password match\n      if (password !== confirm_password) {\n        return {\n          success: false,\n          message: 'Passwords do not match'\n        };\n      }\n\n      // Validate password length\n      if (password.length < 6) {\n        return {\n          success: false,\n          message: 'Password must be at least 6 characters'\n        };\n      }\n      const response = await fetch('http://localhost:5001/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          username: email,\n          password: password,\n          confirm_password: confirm_password\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setIsAuthenticated(true);\n        setUser({\n          username: email\n        });\n        return {\n          success: true,\n          user: {\n            username: email\n          }\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message || 'Registration failed'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error: Could not connect to server'\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await fetch('http://localhost:5001/api/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout error:', error);\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkAuthStatus","response","fetch","method","credentials","ok","redirected","error","login","email","password","headers","body","JSON","stringify","username","data","json","success","message","register","userData","confirm_password","length","logout","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/apple/Downloads/Facial-Recognition-main 2/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check auth status on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/dashboard', {\n        method: 'GET',\n        credentials: 'include'\n      });\n      \n      if (response.ok || response.redirected) {\n        // Try to get user info from session if available\n        setIsAuthenticated(true);\n      } else {\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      const { email, password } = credentials;\n      \n      const response = await fetch('http://localhost:5001/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          username: email, // Using email as username for this system\n          password: password\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setIsAuthenticated(true);\n        setUser({ username: email });\n        return { success: true, user: { username: email } };\n      } else {\n        return {\n          success: false,\n          message: data.message || 'Login failed'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error: Could not connect to server'\n      };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const { email, password, confirm_password } = userData;\n      \n      // Validate password match\n      if (password !== confirm_password) {\n        return {\n          success: false,\n          message: 'Passwords do not match'\n        };\n      }\n\n      // Validate password length\n      if (password.length < 6) {\n        return {\n          success: false,\n          message: 'Password must be at least 6 characters'\n        };\n      }\n\n      const response = await fetch('http://localhost:5001/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          username: email,\n          password: password,\n          confirm_password: confirm_password\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setIsAuthenticated(true);\n        setUser({ username: email });\n        return { success: true, user: { username: email } };\n      } else {\n        return {\n          success: false,\n          message: data.message || 'Registration failed'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error: Could not connect to server'\n      };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('http://localhost:5001/api/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      \n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout error:', error);\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}